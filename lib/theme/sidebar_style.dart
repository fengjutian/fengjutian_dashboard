import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

import 'package:forui/forui.dart';

// ignore_for_file: unnecessary_ignore
// ignore_for_file: avoid_redundant_argument_values

/// Generated by Forui CLI.
///
/// Modify the generated function bodies to create your own custom style.
/// Then, call the modified functions and pass the results to your FThemeData.
///
/// ### Example
/// Generated style:
/// ```dart
/// // Modify this function's body.
/// FDividerStyles dividerStyles({
///   required FColorScheme color,
///   required FStyle style,
/// }) => FDividerStyles(
///   horizontalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.horizontalStyle,
///     width: style.borderWidth,
///   ),
///   verticalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.verticalStyle,
///     width: style.borderWidth,
///   ),
/// );
/// ```
///
/// File that contains your `FThemeData`:
/// ```dart
/// import 'package:my_application/theme/divider_style.dart' // Your generated style file.
///
/// FThemeData(
///  color: FThemes.zinc.light.color,
///  style: FThemes.zinc.light.style,
///  dividerStyles: CustomFDividerStyles.dividerStyles( // The function in your generated style file.
///    color: FThemes.zinc.light.color,
///    style: FThemes.zinc.light.style,
///   ),
/// );
/// ```
///
/// A theme can be generated using the Forui CLI:
/// ```shell
/// dart forui theme create [theme name]
/// ```
///
/// See https://forui.dev/docs/themes#customize-themes for more information.
FSidebarStyle sidebarStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) => FSidebarStyle(
  decoration: BoxDecoration(
    color: colors.background,
    border: BorderDirectional(
      end: BorderSide(color: colors.border, width: style.borderWidth),
    ),
  ),
  groupStyle: _sidebarGroupStyle(
    colors: colors,
    typography: typography,
    style: style,
  ),
  constraints: const BoxConstraints.tightFor(width: 250),
  headerPadding: const EdgeInsets.fromLTRB(0, 16, 0, 0),
  contentPadding: const EdgeInsets.symmetric(vertical: 12),
  footerPadding: const EdgeInsets.fromLTRB(0, 0, 0, 16),
);

FSidebarGroupStyle _sidebarGroupStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) => FSidebarGroupStyle(
  labelStyle: typography.sm.copyWith(
    color: colors.mutedForeground,
    overflow: TextOverflow.ellipsis,
    fontWeight: FontWeight.w500,
  ),
  actionStyle: FWidgetStateMap({
    WidgetState.hovered | WidgetState.pressed: IconThemeData(
      color: colors.primary,
      size: 18,
    ),
    WidgetState.any: IconThemeData(color: colors.mutedForeground, size: 18),
  }),
  tappableStyle: style.tappableStyle,
  focusedOutlineStyle: style.focusedOutlineStyle,
  itemStyle: _sidebarItemStyle(
    colors: colors,
    typography: typography,
    style: style,
  ),
  padding: const EdgeInsets.symmetric(horizontal: 16),
  headerSpacing: 8,
  headerPadding: const EdgeInsets.fromLTRB(12, 0, 8, 2),
  childrenSpacing: 2,
  childrenPadding: const EdgeInsets.fromLTRB(0, 0, 0, 24),
);

FSidebarItemStyle _sidebarItemStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) => FSidebarItemStyle(
  textStyle: FWidgetStateMap({
    WidgetState.disabled: typography.base.copyWith(
      color: colors.mutedForeground,
      height: 1,
      overflow: TextOverflow.ellipsis,
    ),
    WidgetState.any: typography.base.copyWith(
      color: colors.foreground,
      height: 1,
      overflow: TextOverflow.ellipsis,
    ),
  }),
  iconStyle: FWidgetStateMap({
    WidgetState.disabled: IconThemeData(
      color: colors.mutedForeground,
      size: 16,
    ),
    WidgetState.any: IconThemeData(color: colors.foreground, size: 16),
  }),
  collapsibleIconStyle: FWidgetStateMap({
    WidgetState.disabled: IconThemeData(
      color: colors.mutedForeground,
      size: 16,
    ),
    WidgetState.any: IconThemeData(color: colors.foreground, size: 16),
  }),
  backgroundColor: FWidgetStateMap({
    WidgetState.disabled: Colors.transparent,
    WidgetState.selected | WidgetState.hovered | WidgetState.pressed: colors
        .hover(colors.secondary),
    WidgetState.any: Colors.transparent,
  }),
  borderRadius: style.borderRadius,
  tappableStyle: style.tappableStyle.copyWith(
    bounceTween: FTappableStyle.noBounceTween,
  ),
  focusedOutlineStyle: style.focusedOutlineStyle.copyWith(spacing: 0),
  iconSpacing: 8,
  collapsibleIconSpacing: 8,
  expandDuration: const Duration(milliseconds: 200),
  expandCurve: Curves.easeOutCubic,
  collapseDuration: const Duration(milliseconds: 150),
  collapseCurve: Curves.easeInCubic,
  childrenSpacing: 2,
  childrenPadding: const EdgeInsets.only(left: 26, top: 2),
  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
);
